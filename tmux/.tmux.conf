set-option -sa terminal-features ',xterm-256color:RGB'
set-option -sg escape-time 10
set-option -g focus-events on
set-option -g detach-on-destroy off
set-option -g renumber-windows on
set -g allow-passthrough on

set-window-option -g mode-keys vi
set -g mouse on

# Key bindings
unbind-key -T prefix t # unbind big clock

# Display current open sessions or open new one
bind-key F display-popup -E \
  "tmux switch-client -t $(tmux list-sessions | sed -E 's/:.*$//' | fzf)"
bind-key f display-popup -E "$(bash ,tmux-session)"

# open lazygit in big popup window
bind-key g display-popup -E -w 95% -h 95% "lazygit"

# automatically resize horizontal split
bind-key \" split-window -v \; resize-pane -y 10

# vim-mode copy/paste
set-window-option -g mode-keys vi
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'pbcopy'

# Start counting pane and window number at 1
set -g base-index 1
setw -g pane-base-index 1

# Statusline
set -g status off
set -g status on
bind ' ' set -g status
set -g status-interval 60
set-option -g status-position bottom

# only show statusline if there is more then one window
# set-hook -g after-new-window 'if "[ #{session_windows} -gt 1 ]" "set status on"'
# set-hook -g after-kill-pane 'if "[ #{session_windows} -lt 2 ]" "set status off"'
# set-hook -g pane-exited 'if "[ #{session_windows} -lt 2 ]" "set status off"'
# set-hook -g window-layout-changed 'if "[ #{session_windows} -lt 2 ]" "set status off"'

# Basic status bar colors
set -g status-bg default
set -g status-fg white
set -g status-style bg=default,fg=white

# Window Statusline
set-option -g automatic-rename-format "#(,icons #{pane_current_command} #{window_panes}) #{pane_current_command}"
setw -g window-status-style "fg=colour8"
set -g window-status-format " #W"

# Highlight the current window.
setw -g window-status-current-style "fg=default"
set -g window-status-current-format "#{?pane_in_mode,#[fg=colour11],}#{?client_prefix,#[fg=colour167],} #W"

# Left Statusline
set -g status-left-length 100
set -g status-left-style default
set -g status-left-style "fg=default"
set -g status-left ""

# Right Statusline
set -g status-right-length 100
set -g status-right-style default
set -g status-right "#(printf \uF07C)  #S "

# reload config keymap
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# open taskwarrior with current session name as project
bind-key T display-popup -h 90% -w 90% \
  "bash -c '
    PROJECT=\$(tmux display-message -p \"#S\")
    CMD=\"task rc.defaultwidth:0 rc.verbose:nothing ls created- desc project:\$PROJECT or project: \"
    \$CMD | fzf \
      --header \":: <\e[34mctrl-a\e[0m> to add | <\e[36mctrl-e\e[0m> to edit | <\e[31mctrl-x\e[0m> to delete | <enter> to start/stop\" \
      --bind \"ctrl-a:execute(task add {q} project:\$PROJECT)+change-query()+reload(\$CMD)\" \
      --bind \"ctrl-x:execute(task rc.verbose:nothing delete {1})+reload(\$CMD)\" \
      --bind \"ctrl-e:execute(task edit {1})+reload(\$CMD)\" \
      --bind \"ctrl-t:execute(echo \\\"Tag: \\\"; read tag; task {1} modify \\\"\\\$tag\\\")+reload(\$CMD)\" \
      --bind \"ctrl-n:execute(echo \\\"Annotation: \\\"; read tag; task {1} annotate \\\"\\\$tag\\\")+reload(\$CMD)\" \
      --bind \"ctrl-r:reload(\$CMD)\" \
      --bind \"enter:execute(task {1} | grep -q active && task {1} stop || task {1} start)+reload(\$CMD)\"
  '"
